# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost:8080/api
paths:
  /auth/registration:
    post:
      summary: Endpoint for user registration
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - full_name
                - password
              properties:
                phone_number:
                  type: string
                  minLength: 10
                  maxLength: 13
                  example: "+62832183812"
                full_name:
                  type: string
                  minLength: 3
                  maxLength: 60
                  example: "john doe"
                password:
                  type: string
                  example: "password"
      responses:
        '201':
          description: user succesfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistrationResponse"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  value:
                    message: "phone number must be between 10 and 13 characters, phone number must start with +62, full name must be between 3 and 60 characters, password must be between 6 and 64 characters, password must contain at least one uppercase letter, password must contain at least one number, password must contain at least one special character"
        '409':
          description: conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  value:
                    message: "user already exist"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  value:
                    message: "Internal server error"
  /auth/login:
    post:
      summary: Endpoint for user login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - password
              properties:
                phone_number:
                  type: string
                  example: "+62832183812"
                password:
                  type: string
                  example: "password"
      responses:
        '200':
          description: user succesfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized Wrong password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  value:
                    message: "internal server error"
  /users:
    get:
      security:
        - jwt_auth: []
      summary: Endpoint for get profile
      operationId: profile
      responses:
        '200':
          description: status ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  value:
                    message: "unauthorized access"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  value:
                    message: "internal server error"
    put:
      security:
        - jwt_auth: []
      summary: Endpoint for update profile
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - full_name
              properties:
                phone_number:
                  type: string
                  example: "+62832183812"
                full_name:
                  type: string
                  example: "password"
      responses:
        '200':
          description: status ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  value:
                    message: "unauthorized access"
        '409':
          description: conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  value:
                    message: "internal server error"
components:
  securitySchemes:
    jwt_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegistrationResponse:
      type: object
      required:
        - data
        - message
      properties:
        data:
          type: object
          required:
            - id
          properties:
            id:
              type: integer
              example: 1
        message:
          type: string
          example: "success"
    UserLoginResponse:
      type: object
      required:
        - data
        - message
      properties:
        data:
          type: object
          required:
            - token
            - user_id
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            user_id:
              type: integer
              example: 1
        message:
          type: string
          example: "success"
    UserResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - phoneNumber
            - fullName
          properties:
            phoneNumber:
              type: string
              example: "+62123456789"
            fullName:
              type: string
              example: "John Doe"
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
