// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth.go

// Package internal is a generated GoMock package.
package internal

import (
	rsa "crypto/rsa"
	reflect "reflect"

	entities "github.com/SawitProRecruitment/UserService/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockJWTSigner is a mock of JWTSigner interface.
type MockJWTSigner struct {
	ctrl     *gomock.Controller
	recorder *MockJWTSignerMockRecorder
}

// MockJWTSignerMockRecorder is the mock recorder for MockJWTSigner.
type MockJWTSignerMockRecorder struct {
	mock *MockJWTSigner
}

// NewMockJWTSigner creates a new mock instance.
func NewMockJWTSigner(ctrl *gomock.Controller) *MockJWTSigner {
	mock := &MockJWTSigner{ctrl: ctrl}
	mock.recorder = &MockJWTSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTSigner) EXPECT() *MockJWTSignerMockRecorder {
	return m.recorder
}

// SignJWT mocks base method.
func (m *MockJWTSigner) SignJWT(user entities.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWT", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWT indicates an expected call of SignJWT.
func (mr *MockJWTSignerMockRecorder) SignJWT(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWT", reflect.TypeOf((*MockJWTSigner)(nil).SignJWT), user)
}

// VerifyJWT mocks base method.
func (m *MockJWTSigner) VerifyJWT(tokenString string, publicKey *rsa.PublicKey) (JWTClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", tokenString, publicKey)
	ret0, _ := ret[0].(JWTClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockJWTSignerMockRecorder) VerifyJWT(tokenString, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockJWTSigner)(nil).VerifyJWT), tokenString, publicKey)
}

// MockPasswordComparer is a mock of PasswordComparer interface.
type MockPasswordComparer struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordComparerMockRecorder
}

// MockPasswordComparerMockRecorder is the mock recorder for MockPasswordComparer.
type MockPasswordComparerMockRecorder struct {
	mock *MockPasswordComparer
}

// NewMockPasswordComparer creates a new mock instance.
func NewMockPasswordComparer(ctrl *gomock.Controller) *MockPasswordComparer {
	mock := &MockPasswordComparer{ctrl: ctrl}
	mock.recorder = &MockPasswordComparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordComparer) EXPECT() *MockPasswordComparerMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockPasswordComparer) ComparePassword(password, hashedPassword, salt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", password, hashedPassword, salt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockPasswordComparerMockRecorder) ComparePassword(password, hashedPassword, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockPasswordComparer)(nil).ComparePassword), password, hashedPassword, salt)
}
